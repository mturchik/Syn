@inject IWebApiService _webApi
@inject IToastService _toast
@inject ILogger<FeedSearch> _logger
@inject ISubscriptionService _subService

<div class="card shadow-sm">
	<div class="card-body">
		<EditForm Model="this" OnValidSubmit="Search" role="form">
			<div class="input-group">
				<span id="inp-url-desc" class="input-group-text">Search Feeds By Url</span>
				<InputText @bind-Value="Url" disabled="@Busy" id="inp-url" class="form-control" aria-describedby="inp-url-desc" />
				<button disabled="@Busy" class="btn btn-success" type="submit">Search</button>
			</div>
		</EditForm>
		@if (Feed is not null)
		{
			<FeedTile Feed="Feed" Subscription="Subscriptions.FirstOrDefault(s => s.Url == Feed.Url)" Subscribe="Subscribe" Unsubscribe="Unsubscribe" />
		}
	</div>
</div>

@code {
	protected string Url { get; set; } = "";
	protected bool Busy = false;
	protected Feed? Feed { get; set; }
	protected List<FeedSubscription> Subscriptions { get; set; } = new();

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();

		Subscriptions = await _subService.GetSubscriptions() ?? new();
		_subService.SubscriptionsChanged += UpdateSubscriptions;
	}

	protected void UpdateSubscriptions(object? sender, List<FeedSubscription> subscriptions)
	{
		Subscriptions = subscriptions;
		StateHasChanged();
	}

	protected async Task Search()
	{
		try
		{
			Feed = null;
			Busy = true;
			StateHasChanged();

			Feed = await _webApi.Get<Feed>($"api/feeds?url={HttpUtility.UrlEncode(Url)}");
			Busy = false;
		}
		catch (Exception ex)
		{
			Busy = false;
			_logger.LogError(ex, "Feed Search Failed for {url}", Url);
			_toast.ShowError("Search Failed");
		}
	}

	protected async Task Subscribe()
	{
		if (Feed is null) return;
		await _subService.AddSubscription(Feed);
	}

	protected async Task Unsubscribe()
	{
		if (Feed is null) return;
		await _subService.RemoveSubscription(Feed);
	}
}