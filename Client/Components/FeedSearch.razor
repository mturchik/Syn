@inject IWebApiService _webApi

<div class="card shadow-sm">
	<div class="card-body">
		<EditForm Model="this" OnValidSubmit="Search" role="form">
			<div class="input-group input-group-sm">
				<span id="inp-url-desc" class="input-group-text">Search Feeds By Url</span>
				<InputText @bind-Value="Url" disabled="@Busy" id="inp-url" class="form-control" aria-describedby="inp-url-desc" />
				<button disabled="@Busy" class="btn btn-outline-primary" type="submit">Search</button>
			</div>
		</EditForm>
		@if (Feed is not null)
		{
			<div class="card shadow-sm mt-2">
				<div class="card-header">
					@if (!string.IsNullOrEmpty(Feed.ImageUrl))
					{
						<img src="@Feed.ImageUrl" class="img-thumbnail float-start me-3" style="max-width: 25%; max-height: 100px;" alt="@Feed.ImageUrl" />
					}
					<h4 class="card-title">
						@Feed.Title
						<a href="@Feed.Link" target="_blank" class="link-primary">
							<i class="fa fa-link" />
						</a>
					</h4>
					<h5 class="card-subtitle"> @Feed.Description </h5>
					<small class="card-text">Last Updated: @Feed.LastUpdatedDate?.ToString("g")</small>
				</div>
				<ul class="list-group list-group-flush">
					@foreach (var item in Feed.Items)
					{
						<li class="list-group-item">
							<h5>
								<a href="@item.Link" target="_blank" class="link-primary">
									@item.Title
									@if (!string.IsNullOrEmpty(item.Author))
									{
										<small class="text-secondary">by @item.Author</small>
									}
								</a>
							</h5>
							<p class="mb-0 ms-3">
								@item.Description
								<div>
									@foreach (var cat in item.Categories)
									{
										<span class="badge bg-info me-2">@cat</span>
									}
								</div>
								<small class="text-secondary">Published: @item.PublishingDate?.ToString("g") </small>
							</p>
						</li>
					}
				</ul>
			</div>
		}
	</div>
</div>

@code {
	protected string Url { get; set; } = "";
	protected bool Busy = false;
	protected Feed? Feed { get; set; }

	protected async Task Search()
	{
		try
		{
			Busy = true;
			Feed = await _webApi.Get<Feed>($"api/feeds?url={HttpUtility.UrlEncode(Url)}");
			Busy = false;
		}
		catch (Exception)
		{
			throw;
		}
	}
}
